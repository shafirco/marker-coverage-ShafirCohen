name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-test:
    name: Build & Test (CMake + OpenCV)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # == CMake + Ninja ==
      - name: Set up CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest

      # ---------- Linux ----------
      - name: Install deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libopencv-dev

      - name: Configure (Linux)
        if: runner.os == 'Linux'
        run: >
          cmake -S . -B build -G "Ninja"
          -DCMAKE_BUILD_TYPE=Release

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --config Release --parallel

      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: ctest --test-dir build --output-on-failure

      # ---------- Windows ----------
      
      - name: MSVC Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      
      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          runVcpkgInstall: true

      - name: Install OpenCV (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          vcpkg install --triplet x64-windows
          echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: >
          cmake -S . -B build -G "Ninja"
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config Release --parallel

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ctest --test-dir build --output-on-failure --build-config Release
